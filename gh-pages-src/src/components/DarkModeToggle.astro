---
// DarkModeToggle.astro - Dark/Light mode toggle component
---

<button
  id="theme-toggle"
  type="button"
  class="relative inline-flex h-10 w-10 items-center justify-center rounded-lg bg-gray-100 p-2 text-gray-500 transition-all duration-200 hover:bg-gray-200 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-100 dark:focus:ring-offset-gray-900"
  aria-label="Toggle dark mode"
>
  <!-- Sun icon (visible in dark mode) -->
  <svg
    id="sun-icon"
    class="h-5 w-5 transition-all duration-200 ease-in-out"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    ></path>
  </svg>

  <!-- Moon icon (visible in light mode) -->
  <svg
    id="moon-icon"
    class="h-5 w-5 transition-all duration-200 ease-in-out"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    ></path>
  </svg>
</button>

<script>
  class ThemeToggle {
    private button: HTMLButtonElement;
    private sunIcon: SVGElement;
    private moonIcon: SVGElement;

    constructor() {
      this.button = document.getElementById('theme-toggle') as HTMLButtonElement;
      this.sunIcon = document.getElementById('sun-icon') as SVGElement;
      this.moonIcon = document.getElementById('moon-icon') as SVGElement;
      
      this.init();
    }

    private init(): void {
      // Set initial theme based on localStorage or system preference
      this.setInitialTheme();
      
      // Add click event listener
      this.button.addEventListener('click', () => this.toggleTheme());
      
      // Update UI to match current theme
      this.updateUI();
    }

    private setInitialTheme(): void {
      const savedTheme = localStorage.getItem('theme');
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }

    private toggleTheme(): void {
      const isDark = document.documentElement.classList.contains('dark');
      
      if (isDark) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      }
      
      this.updateUI();
    }

    private updateUI(): void {
      const isDark = document.documentElement.classList.contains('dark');
      
      if (isDark) {
        // Dark mode - show sun icon
        this.sunIcon.style.opacity = '1';
        this.sunIcon.style.transform = 'rotate(0deg) scale(1)';
        this.moonIcon.style.opacity = '0';
        this.moonIcon.style.transform = 'rotate(90deg) scale(0.8)';
        this.button.setAttribute('aria-label', 'Switch to light mode');
      } else {
        // Light mode - show moon icon
        this.sunIcon.style.opacity = '0';
        this.sunIcon.style.transform = 'rotate(-90deg) scale(0.8)';
        this.moonIcon.style.opacity = '1';
        this.moonIcon.style.transform = 'rotate(0deg) scale(1)';
        this.button.setAttribute('aria-label', 'Switch to dark mode');
      }
    }
  }

  // Initialize theme toggle when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeToggle();
  });

  // Handle theme changes on page navigation (for SPAs)
  document.addEventListener('astro:page-load', () => {
    new ThemeToggle();
  });
</script>

<style>
  /* Ensure smooth transitions for icons */
  #sun-icon,
  #moon-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: center;
    transform: translate(-50%, -50%);
  }

  /* Initial state - show moon icon in light mode */
  :global(html:not(.dark)) #sun-icon {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(-90deg) scale(0.8);
  }

  :global(html:not(.dark)) #moon-icon {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0deg) scale(1);
  }

  /* Dark mode state - show sun icon */
  :global(html.dark) #sun-icon {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0deg) scale(1);
  }

  :global(html.dark) #moon-icon {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(90deg) scale(0.8);
  }

  /* Add focus styles for accessibility */
  #theme-toggle:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
</style>